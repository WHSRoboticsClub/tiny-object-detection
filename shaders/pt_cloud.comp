#version 450
//! GLSL Point Cloud Preparation
//! TODO Debug depth_samp input issues
//! TODO Merge with pt_cloud_weights shader

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform usampler2D depth_samp; // (z, 0, 0, 1)
layout(set = 0, binding = 1) uniform usampler2D class_samp; // (class, ID, 0, 1)

// Need a vec4 to get through to rust without issues
layout(set = 0, binding = 2, r32ui) uniform uimage2D map;

// layout(set = 0, binding = 4, r32ui) uniform uimage2D dbg;

layout(set = 0, binding = 3) buffer Balls {
    vec4 data[100]; // pos, number, 0 // Need a vec4 to get through to rust without issues
    // pos: The a center of the ball
    // number: How many pixels have gone into the average pos (Needed for averaging)
} out_balls;

// Image dims
const uint width = 640;
const uint height = 480;
const float max_depth_in = 4000.0;

const float y_fov = 1.01229096616; // 58 deg
const float x_fov = 1.51843644924; // 87 deg 

// Avoidance constants: Going through bots low to the ground is just as
//                      bad as going through tall bots.
const float bot_avoidance_const = 100.0;

// Bump Normalization constants: Taller objects have same area effect as 
//                               shorter objects
const int bot_norm_const = 20;
const int terrain_norm_const = 10;

const float bump_err = 0.1;

/// dump a mound of prespecified height and area effect at a position.
/// Reasoning: This will essentially make traveling through that position
/// suboptimal (how bad is proportional to the height). The area effect 
/// will help ensure clearance.
void bump_img_store(ivec2 pos, float val, int bump_size) {
    // Sigmoid function with constants for clearance 
    // s = size of bump = val to be stored
    // L = length of bump = bump_size
    // r = error: half the difference between the range and s
    //
    //                 s
    // y = ----------------------------
    //     1 + ((s / r) - 1)^(2x/L - 1)
    //
    // select domain: x ∈ [0, L]
    // range: y ∈ [r, s-r]
    //

    ivec2 origin = pos - bump_size;

    float C_1 = val / bump_err - 1.0;
    float C_2 = 2.0 / float(bump_size);
    
    for (int x = 0; x < bump_size*2; x++) {
        for (int y = 0; y < bump_size*2; y++) {
            ivec2 loc = origin + ivec2(x, y); // location
            if (loc.x > 0 && loc.y > 0 && loc.x < width - 1 && loc.y < height - 1) {
                // proximity (Probably some cheating that can be done here for speed)
                float prox = sqrt(float(pow(pos.x - loc.x, 2) + pow(pos.y - loc.y, 2))); 
                float y_add = val / (1.0 + pow(C_1, C_2 * prox - 1.0));
                
                imageAtomicMax(map, loc, uint(y_add));
            }
        }
    }
}

void store_ball(int id, ivec2 val) { 
    float term = out_balls.data[id].z;
    vec2 new_val = out_balls.data[id].xy * term + val;
    out_balls.data[id] = vec4(new_val / (term + 1), term + 1, 0);
}

void main() {
    uvec2 img_pos = gl_GlobalInvocationID.xy;
    // Textures use normalized coordinates. 
    // Thanks to RuaWhitepaw#1586 for getting me the memo.
    vec2 img_pos_norm = vec2(img_pos) / vec2(width, height);
    uint depth_read = texture(depth_samp, img_pos_norm).x;
    // imageStore(dbg, ivec2(img_pos), uvec4(depth_read));
    uvec2 class_read = texture(class_samp, img_pos_norm).xy;
    
    float depth = float(depth_read) 
        * cos(atan(tan(y_fov / 2.0) * float(img_pos.y) * 2.0 / float(height)))
        * cos(atan(tan(x_fov / 2.0) * float(img_pos.x) * 2.0 / float(width)));

    // Not real world pos so that it fits neatly in the Image2D
    int depth_img_coord = int(float(height) * depth / max_depth_in);
    ivec3 imgwrld_pos = ivec3(img_pos, depth_img_coord);

    int cls = int(class_read.x);
    int id = int(class_read.y);

    // action_ty:
    // 0: follow terrain
    // 1: avoid // Could differentiate between red and blue robots and alter mound
    // 2: goal (go to ball)
    int action_ty = cls;
    if (action_ty > 1) {
        action_ty = action_ty - 1;
    }

    // For indexing it is best to store a birdseye view (xz)
    ivec2 new_pos = ivec2(imgwrld_pos.x, height - imgwrld_pos.z); // z=0 is at the bottom of the image

    if (action_ty == 0) { // Terrain
        bump_img_store(new_pos, imgwrld_pos.y, terrain_norm_const);
    } else if (action_ty == 2) { // Ball
        // TODO: instance segmentation set position according to unique id
        store_ball(id, new_pos);
    } else { // Robot
        bump_img_store(new_pos, bot_avoidance_const, bot_norm_const);
    }
}